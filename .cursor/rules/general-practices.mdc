---
description: Enforces general programming best practices across all languages.
alwaysApply: true
---

# ðŸ§  General Programming Best Practices

Apply these when writing or refactoring any code in this project.

## âœ… Type Safety
- Avoid stringly-typed APIs (e.g., prefer enums over raw strings).
- Prefer enums, classes, or constants over raw strings or magic values.

## âœ… Dependency Clarity
- Favor explicit imports and injections over global state or singleton patterns.
- Minimize side effects during module load time.

## âœ… Naming
- Use descriptive names. Avoid abbreviations unless well-established (e.g., `UI`, `ID`).
- Functions should be named with verbs; classes with nouns.

## âœ… Modularity & Single Responsibility
- Functions should do one thing. If a function is handling input, updating state, and rendering â€” break it up.

## âœ… Defensive Programming
- Validate inputs early and clearly.
- Avoid silent failure patterns (e.g., catching `Exception` and doing nothing).

## âœ… Code Comments
- Use comments for *why*, not *what*. Code should express the *what*.

## âœ… Refactor Signals
- More than 2 levels of nesting â†’ extract logic
- Repeated string literals â†’ extract constant
- Copy-paste across files â†’ extract module

name: Build Executables

on:
  workflow_call:
    inputs:
      os_filter:
        description: 'Which OS to build for (all, ubuntu, windows, macos)'
        required: false
        default: 'all'
        type: string
      upload_artifacts:
        description: 'Whether to upload artifacts (for testing)'
        required: false
        default: true
        type: boolean
      upload_to_release:
        description: 'Whether to upload to GitHub release'
        required: false
        default: false
        type: boolean
      release_tag:
        description: 'Release tag for uploading to release'
        required: false
        default: ''
        type: string

permissions:
  contents: write
  actions: read

jobs:
  build-executables:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: simpleplan-linux
            os_filter: ubuntu
          - os: windows-latest
            asset_name: simpleplan-windows.exe
            os_filter: windows
          - os: macos-14
            asset_name: simpleplan-macos
            os_filter: macos

    runs-on: ${{ matrix.os }}

    steps:
    - name: Check if should run for this OS
      id: should_run
      shell: bash
      run: |
        should_run="true"
        if [[ "${{ inputs.os_filter }}" != "all" && "${{ inputs.os_filter }}" != "${{ matrix.os_filter }}" ]]; then
          should_run="false"
        fi
        echo "should_run=$should_run" >> $GITHUB_OUTPUT
        echo "Will run build for ${{ matrix.os }}: $should_run"

    - uses: actions/checkout@v4
      if: steps.should_run.outputs.should_run == 'true'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
      if: steps.should_run.outputs.should_run == 'true'

    - name: Install Poetry (Non-Windows)
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
      if: steps.should_run.outputs.should_run == 'true' && runner.os != 'Windows'

    - name: Install Poetry (Windows)
      if: runner.os == 'Windows' && steps.should_run.outputs.should_run == 'true'
      shell: pwsh
      run: |
        echo "Installing Poetry on Windows..."
        # Use pip to install poetry directly
        python -m pip install --upgrade pip
        python -m pip install poetry==1.7.1

        # Add Python Scripts to PATH
        $userScripts = [System.IO.Path]::Combine($env:APPDATA, "Python", "Scripts")
        $localScripts = [System.IO.Path]::Combine($env:LOCALAPPDATA, "Programs", "Python", "Python312", "Scripts")

        echo "Adding to PATH: $userScripts"
        echo $userScripts >> $env:GITHUB_PATH
        echo "Adding to PATH: $localScripts"
        echo $localScripts >> $env:GITHUB_PATH

        # Also add the current Python Scripts directory
        $pythonScripts = [System.IO.Path]::Combine($env:pythonLocation, "Scripts")
        echo "Adding to PATH: $pythonScripts"
        echo $pythonScripts >> $env:GITHUB_PATH

    - name: Debug Poetry location (Windows)
      if: runner.os == 'Windows' && steps.should_run.outputs.should_run == 'true'
      shell: pwsh
      run: |
        echo "Current PATH: $env:PATH"
        echo "Python location: $env:pythonLocation"
        echo "Looking for Poetry executable..."

        # Check multiple possible locations
        $locations = @(
          "$env:APPDATA\Python\Scripts\poetry.exe",
          "$env:LOCALAPPDATA\Programs\Python\Python312\Scripts\poetry.exe",
          "$env:pythonLocation\Scripts\poetry.exe"
        )

        foreach ($loc in $locations) {
          if (Test-Path $loc) {
            echo "Found poetry at: $loc"
            & $loc --version
          }
        }

        # Try to find poetry with Get-Command
        Get-Command poetry -ErrorAction SilentlyContinue

        # Search for any poetry executables
        Get-ChildItem -Path $env:pythonLocation -Recurse -Name "poetry*" -ErrorAction SilentlyContinue

    - name: Verify Poetry installation
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # On Windows, try different methods to find poetry
          poetry.exe --version || poetry --version || python -m poetry --version
        else
          poetry --version
        fi
      if: steps.should_run.outputs.should_run == 'true'

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      if: steps.should_run.outputs.should_run == 'true'

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true' && steps.should_run.outputs.should_run == 'true'
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          poetry.exe install --no-interaction --no-root || poetry install --no-interaction --no-root || python -m poetry install --no-interaction --no-root
        else
          poetry install --no-interaction --no-root
        fi

    - name: Install project
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          poetry.exe install --no-interaction || poetry install --no-interaction || python -m poetry install --no-interaction
        else
          poetry install --no-interaction
        fi
      if: steps.should_run.outputs.should_run == 'true'

    - name: Build executable
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          poetry.exe run pyinstaller --onefile --name ${{ matrix.asset_name }} src/simpleplan/main.py || poetry run pyinstaller --onefile --name ${{ matrix.asset_name }} src/simpleplan/main.py || python -m poetry run pyinstaller --onefile --name ${{ matrix.asset_name }} src/simpleplan/main.py
        else
          poetry run pyinstaller --onefile --name ${{ matrix.asset_name }} src/simpleplan/main.py
        fi
      if: steps.should_run.outputs.should_run == 'true'

    - name: Test executable
      shell: bash
      run: |
        # Test that the executable runs and shows help
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          ./dist/${{ matrix.asset_name }} --help
        else
          ./dist/${{ matrix.asset_name }} --help
        fi
      if: steps.should_run.outputs.should_run == 'true'

    - name: Display executable info
      shell: bash
      run: |
        echo "Built executable: ${{ matrix.asset_name }}"
        ls -la ./dist/
        if [[ "${{ runner.os }}" != "Windows" ]]; then
          file ./dist/${{ matrix.asset_name }}
        fi
      if: steps.should_run.outputs.should_run == 'true'

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executable-${{ matrix.os }}
        path: ./dist/${{ matrix.asset_name }}
        retention-days: 7
      if: steps.should_run.outputs.should_run == 'true' && inputs.upload_artifacts

    - name: Upload executable to release
      if: steps.should_run.outputs.should_run == 'true' && inputs.upload_to_release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ inputs.release_tag }} ./dist/${{ matrix.asset_name }} --clobber
